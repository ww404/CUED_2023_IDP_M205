//#include "C:\Users\BramH\Documents\Arduino\Functions_Corrected\Functions_Corrected.ino"
#include <Adafruit_MotorShield.h>
#define MAX_RANG (520)//the max measurement value of the module is 520cm(a little bit longer than effective max range)
#define  ADC_SOLUTION (1023.0)
// logic for junctions and normally turning
// functions we are using:
//      MoveForward     moves forward until deteects a block, and calls function Block
//      Block           when a block has been found, detect and shine LED and clamp it together (all that jazzzzzz)
//      TurnLeft and TurnRight      turns 90 degrees or until some sensor changes 
// sensors we are using
//      LineSensor_Left, LineSensor_Right, LineSensor_Center
//      MagneticSensor
//      UltraSonicSensor
// motors we are using
//      MotorLeft and MotorRight
//      Servor (for clampling block)
// LEDs we are using
//      Red and Green for testing magnetic
//      Blue for indicating moving
//      White for illuminating the line-sensors


int leftlinesensorPin = 2; 
int rightlinesensorPin = 3; 
int centerlinesensorPin_left = 4;
int centerlinesensorPin_right = 5;
int MagInputPin = 6;
int sensityPin = A3;
int greenLEDpin = 7;
int redLEDpin = 8;
int blueLEDpin = 9;


Adafruit_MotorShield AFMS;
Adafruit_DCMotor *Motor_L = AFMS.getMotor(2);
Adafruit_DCMotor *Motor_R = AFMS.getMotor(1);


//-------------------------------------------------------------------------------------------------------------------------------------------------

/*
int Pass_Zero = 0;
int Blocks = 0;
int Turn_Left_count = 0;
int Turn_Right_count = 0;
int Ignore_Turn = 0;
int Total_Junction = 0;
int angles;
int speed;

int valLeft = digitalRead(leftlinesensorPin); // read left input value
int valRight = digitalRead(rightlinesensorPin); // read right input value
int valCenter_left = digitalRead(centerlinesensorPin_left); 
int valCenter_right = digitalRead(centerlinesensorPin_right); 
float sensity_t = analogRead(sensityPin);
float dist_t;
*/


int LineTracking(){


int valCenter_left = digitalRead(centerlinesensorPin_left); 
int valCenter_right = digitalRead(centerlinesensorPin_right); 
int speed = 180;

  

// after testing the four_sensors_line_tracking code, can change all this into that tracking code.




if (valCenter_left == HIGH && valCenter_right == LOW) {
  Motor_L->run(FORWARD);
  Motor_R->run(FORWARD);  
  Motor_L->setSpeed(speed*0.8);
  Motor_R->setSpeed(speed);
  //Again modify the delay as required to achieve a suitable amount of rotation
} 

else if (valCenter_left == LOW && valCenter_right == HIGH) {
  Motor_L->run(FORWARD);
  Motor_R->run(FORWARD);  
  Motor_R->setSpeed(speed*0.8);
  Motor_L->setSpeed(speed);
  // Same as above
}  
  


  else {
    Motor_L->run(FORWARD);
    Motor_R->run(FORWARD);  
    Motor_R->setSpeed(speed);
    Motor_L->setSpeed(speed);
  }
}




int LineTrackingandTurning(){
  int valLeft = digitalRead(leftlinesensorPin);
  int valRight = digitalRead(rightlinesensorPin); // read right input value
  int valCenter_left = digitalRead(centerlinesensorPin_left); 
  int valCenter_right = digitalRead(centerlinesensorPin_right); 
  float sensity_t = analogRead(sensityPin);
  float dist_t = sensity_t * MAX_RANG / ADC_SOLUTION;
  int speed = 180;

  

  // after testing the four_sensors_line_tracking code, can change all this into that tracking code.

  if (valLeft == LOW && valRight == LOW){


    if (valCenter_left == HIGH && valCenter_right == LOW) {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_L->setSpeed(speed*0.8);
      Motor_R->setSpeed(speed);
      //Again modify the delay as required to achieve a suitable amount of rotation
    } 

    else if (valCenter_left == LOW && valCenter_right == HIGH) {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_R->setSpeed(speed*0.8);
      Motor_L->setSpeed(speed);
      // Same as above
    }  
  


    else {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_R->setSpeed(speed);
      Motor_L->setSpeed(speed);
    }
  }
  



  if (valLeft == HIGH) {
    if (valRight == HIGH){
    TurnRight();
    }  

    else {
      TurnLeft();
    }
  }

  if (valLeft == LOW && valRight == HIGH) {
    TurnRight();
  }
}



int MoveForward(){
  float sensity_t;
  sensity_t = analogRead(sensityPin);
  int valLeft = digitalRead(leftlinesensorPin);
  int valRight = digitalRead(rightlinesensorPin); // read right input value
  int valCenter_left = digitalRead(centerlinesensorPin_left); 
  int valCenter_right = digitalRead(centerlinesensorPin_right); 
  int speed = 180;
  float dist_t;
  dist_t = sensity_t * MAX_RANG / ADC_SOLUTION;
  //Block();
  while (dist_t <= 1) {
    sensity_t = analogRead(sensityPin);
    dist_t = sensity_t * MAX_RANG / ADC_SOLUTION;

  if (valLeft == LOW && valRight == LOW){


    if (valCenter_left == HIGH && valCenter_right == LOW) {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_L->setSpeed(speed*0.8);
      Motor_R->setSpeed(speed);
      //Again modify the delay as required to achieve a suitable amount of rotation
    } 

    else if (valCenter_left == LOW && valCenter_right == HIGH) {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_R->setSpeed(speed*0.8);
      Motor_L->setSpeed(speed);
      // Same as above
    }  
  


    else {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_R->setSpeed(speed);
      Motor_L->setSpeed(speed);
    }
  }
  


  if (valLeft == HIGH) {
    if (valRight == HIGH){
    TurnRight();
    }  

    else {
      TurnLeft();
    }
  }

  if (valLeft == LOW && valRight == HIGH) {
    TurnRight();
  }
  }
  
 // else {
   //LineTracking();
 // }
}
// if angles = 90, then it turns exactly 90 degrees to the left or right
// else, it is correcting not following lines and turns until it is Straight again

int TurnLeft (){

  int valCenter_left = digitalRead(centerlinesensorPin_left); 
  int valCenter_right = digitalRead(centerlinesensorPin_right); 
  int corner_speed = 120;
  int speed = 180;

  Motor_L->run(BACKWARD);
  Motor_R->run(FORWARD);
  Motor_L->setSpeed(corner_speed); 
  Motor_R->setSpeed(corner_speed);
  delay(1000);

  valCenter_left = digitalRead(centerlinesensorPin_left);
  valCenter_right = digitalRead(centerlinesensorPin_right); 

  while (valCenter_right == LOW || valCenter_left == HIGH) { 
    valCenter_left = digitalRead(centerlinesensorPin_left); 
    valCenter_right = digitalRead(centerlinesensorPin_right);
    Motor_L->run(BACKWARD);
    Motor_R->run(FORWARD);
    Motor_L->setSpeed(corner_speed); 
    Motor_R->setSpeed(corner_speed);
  }
  
  while (valCenter_left == LOW || valCenter_right == LOW){
    valCenter_left = digitalRead(centerlinesensorPin_left); 
    valCenter_right = digitalRead(centerlinesensorPin_right);

    Motor_L->run(FORWARD);
    Motor_R->run(FORWARD);  
    Motor_R->setSpeed(speed*0.4);
    Motor_L->setSpeed(speed);
  }


}    

//}

int TurnRight (){
    int valCenter_left = digitalRead(centerlinesensorPin_left); 
    int valCenter_right = digitalRead(centerlinesensorPin_right); 
    int corner_speed = 120;
    int speed = 180;

    Motor_L->run(FORWARD);
    Motor_R->run(BACKWARD);
    Motor_L->setSpeed(corner_speed); 
    Motor_R->setSpeed(corner_speed);
    delay(1000);

    valCenter_left = digitalRead(centerlinesensorPin_left);
    valCenter_right = digitalRead(centerlinesensorPin_right); 

    while (valCenter_left== LOW || valCenter_right == HIGH) { 
      valCenter_left = digitalRead(centerlinesensorPin_left); 
      valCenter_right = digitalRead(centerlinesensorPin_right);
      Motor_L->run(FORWARD);
      Motor_R->run(BACKWARD);
      Motor_L->setSpeed(corner_speed); 
      Motor_R->setSpeed(corner_speed);
    }
  
    while (valCenter_left == LOW || valCenter_right == LOW){
      valCenter_left = digitalRead(centerlinesensorPin_left); 
      valCenter_right = digitalRead(centerlinesensorPin_right);
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_R->setSpeed(speed);
      Motor_L->setSpeed(speed*0.4);
    }
}


int Stop (){
    Motor_L->run(FORWARD);
    Motor_R->run(FORWARD);
    Motor_L->setSpeed(0); 
    Motor_R->setSpeed(0);
}

int Reverse (int speed){
    Motor_L->run(BACKWARD);
    Motor_R->run(BACKWARD);
    Motor_L->setSpeed(speed);
    Motor_R->setSpeed(speed);


}

int Block(){

  // Detects if the block is magnetic or not
  // Flashes the LED light
  // Clamps the clamp 

  int Magnetic = digitalRead(MagInputPin);
  float sensity_t;
  float block_distance;
  int counter = 0;
  

  // read the value from the sensor:
  sensity_t = analogRead(sensityPin);
  block_distance = sensity_t * MAX_RANG / ADC_SOLUTION;
 
    if (block_distance <= 1){
        delay(1000); // change this according to speed of car (longer = better for accuracy)

        //Magnet lights
        //if (counter == 0){
         Magnetic = digitalRead(MagInputPin); // read input value
    

          if (Magnetic == HIGH) { // check if the input is HIGH
            digitalWrite(redLEDpin, HIGH);
            delay(6000);
           digitalWrite(redLEDpin, LOW); // turn red LED on
          } 
        
          else {
            digitalWrite(greenLEDpin, HIGH);
            delay(6000); 
            digitalWrite(greenLEDpin, LOW);// turn green LED on
          }
        //}
        

      
      //else if (counter == 1){
      //  MoveForward();
      //}
/*
      else{
        delay(5);
      }*/
    }
  }

         
    





/*
void Jaws(bool){
    #include <Servo.h>
    Servo myservo; // create servo object to control a servo

    int pos = 0; // variable to store the servo position
    myservo.attach(9); // attaches the servo on pin 9 to the servo object

    int closed_angle;
    if (true){
        closed_angle = 180;
    }else {
        closed_angle = 0;
    }
    
    myservo.write(closed_angle); 
}
*/
 

int Moving_Light() {

// Megan's code - flashing blue light, use function when robot is moving.

    digitalWrite(blueLEDpin, HIGH);
    delay(250);
    digitalWrite(blueLEDpin, LOW);
    delay(250);

}






void setup() {
  Serial.begin(9600);           // set up Serial library at 9600 bps
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  if (!AFMS.begin()) {         // create with the default frequency 1.6KHz
  // if (!AFMS.begin(1000)) {  // OR with a different frequency, say 1KHz
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1);
  }



  // Set the speed to start, from 0 (off) to 255 (max speed)
  Motor_R->setSpeed(255);
  Motor_L->setSpeed(255);
  Motor_R->run(FORWARD);
  Motor_L->run(FORWARD);
  // turn on motor
  Motor_R->run(RELEASE);
  Motor_L->run(RELEASE);

  pinMode(leftlinesensorPin, INPUT);
  pinMode(rightlinesensorPin, INPUT);
  pinMode(centerlinesensorPin_left, INPUT);
  pinMode(centerlinesensorPin_right, INPUT);

  pinMode (MagInputPin, INPUT);
  pinMode (sensityPin, INPUT) ;
  pinMode (greenLEDpin, OUTPUT);
  pinMode (redLEDpin, OUTPUT);
  pinMode (blueLEDpin, OUTPUT);

}



void loop(){

  int Pass_Zero = 0;
  int Blocks = 0;
  int Turn_Left_count = 0;
  int Turn_Right_count = 0;
  int Ignore_Turn = 0;
  int Total_Junction;
  int angles;
  int speed = 180;

  int valLeft = digitalRead(leftlinesensorPin); // read left input value
  int valRight = digitalRead(rightlinesensorPin); // read right input value
  int valCenter_left = digitalRead(centerlinesensorPin_left); 
  int valCenter_right = digitalRead(centerlinesensorPin_right); 
  float sensity_t = analogRead(sensityPin);
  float dist_t = sensity_t * MAX_RANG / ADC_SOLUTION;
  // Actions:
  //      boolean values:
  bool Found_Block, Magnetic;
  bool Straight = valLeft == 0 && valRight == 0;
  bool Junction_Left = (valLeft == 1 && valRight == 0 && valCenter_left == 1 && valCenter_right == 1);
  bool Junction_Right =  (valLeft == 0 && valRight == 1 && valCenter_left == 1 && valCenter_right == 1);
  bool Junction_Zero = (valLeft == 1 && valRight == 1 && valCenter_left == 1 && valCenter_right == 1);
  bool Junction_Five = (valLeft == 1 && valRight == 1 && valCenter_left == 0 && valCenter_right == 0);

  // Junctions:
  // Junction 5 = Turn_Right_count ==0 && Turn_Left_count ==0 && Ignore_Turn == 0 && Junction_Five == true;
  // Junction 4 = Turn_Right_count ==1 && Turn_Left_count ==0 && Ignore_Turn == 0 && Junction_Right == true;
  // Junction 3: Turn_Right_count ==1, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true
  // Junction 2: Turn_Right_count ==2, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true
  // Junction 1: Turn_Right_count ==3, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true

  // counts


  // What is going to happen IDEALLY:
  // turn on motor
  

   //LineTrackingandTurning();
   MoveForward();
   //Block();

  
  //if(Blocks == 0){

/*
    if (Junction_Zero == true && Total_Junction != //...) {
      Total_Junction = 1;
      valLeft = digitalRead(leftlinesensorPin); // read left input value
      valRight = digitalRead(rightlinesensorPin); // read right input value
      valCenter_left = digitalRead(centerlinesensorPin_left); 
      valCenter_right = digitalRead(centerlinesensorPin_right);  
      Motor_R->setSpeed(180);
      Motor_L->setSpeed(180);
      Motor_R->run(FORWARD);
      Motor_L->run(FORWARD);
      Serial.print("Total_Junction");
    }

          
    if (Junction_Five == true && Total_Junction == 1){ // at Junction 5
      
      valLeft = digitalRead(leftlinesensorPin); // read left input value
      valRight = digitalRead(rightlinesensorPin); // read right input value
      valCenter_left = digitalRead(centerlinesensorPin_left); 
      valCenter_right = digitalRead(centerlinesensorPin_right);  
      TurnRight();
      Total_Junction = 2;
    }

    MoveForward();
*/
    }
  /*
    else if (Junction_Right == true and Total_Junction == 2){ // at Junction 4
        Ignore_Turn = Ignore_Turn + 1;
        MoveForward();
    }

    if (Junction_5 == true and Total_Junction == 3){ // at Junction 3
        Turn_Right_count = Turn_Right_count + 1;
        TurnRight();
        MoveForward();
    }

    else if (Junction_Right == true and Total_Junction == 4){ // at Junction 2
        Turn_Right_count = Turn_Right_count + 1;
        TurnRight();
        MoveForward();
    }

    else if (Junction_Right == true and Total_Junction == 5){ // at Junction 1
        Ignore_Turn = Ignore_Turn + 1;
        MoveForward();
    }

    else if (Junction_Zero == true and Total_Junction == 6 ) { // at Junction 0 return
        Pass_Zero = Pass_Zero + 1;
        TurnLeft();
        MoveForward();
    }

    else if (Junction_Zero == true and Total_Junction == 6 ) { // at the starting point
        if(Magnetic){
            TurnRight();
        }
        else{
            TurnLeft();
        }
        MoveForward();
    }

    else if (Junction_Five == true and Total_Junction == 7 ) { // at one of those colorful boxes
        Total_Junction = Total_Junction + 1;
        MoveForward();
        delay(100);
        Stop();
        Reverse(speed);
        delay(2000);
        TurnLeft();
        MoveForward();
    }

    else if (Junction_Five == true and Total_Junction == 8 ) { // back in origin
        if(Magnetic){
            TurnLeft();
        }
        else{
            TurnRight();
        }
        Blocks = 1;
    }

    //else {
    //  MoveForward();
    //}
  }

  //else {
  //  MoveForward();
  //}
  

  

//}

*/
