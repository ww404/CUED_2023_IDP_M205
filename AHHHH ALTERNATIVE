#include <Adafruit_MotorShield.h>
#define MAX_RANG (520)//the max measurement value of the module is 520cm(a little bit longer than effective max range)
#define  ADC_SOLUTION (1023.0)

// Pin allocation
 int leftlinesensorPin = 2; 
 int rightlinesensorPin = 3; 
 int centerlinesensorPin_left = 4;
 int centerlinesensorPin_right = 5;
 int MagInputPin = 6;
 int sensityPin = A3;
 int greenLEDpin = 7;
 int redLEDpin = 8;
 int blueLEDpin = 9;

// Motor setup
 Adafruit_MotorShield AFMS;
 Adafruit_DCMotor *Motor_L = AFMS.getMotor(2);
 Adafruit_DCMotor *Motor_R = AFMS.getMotor(1);

// Turn left and Right
  
  int TurnLeft (){
   int valCenter_left = digitalRead(centerlinesensorPin_left); 
   int valCenter_right = digitalRead(centerlinesensorPin_right); 
   int corner_speed = 120;
   int speed = 180;

   Motor_L->run(BACKWARD);
   Motor_R->run(FORWARD);
   Motor_L->setSpeed(corner_speed); 
   Motor_R->setSpeed(corner_speed);
   delay(1000);

   valCenter_left = digitalRead(centerlinesensorPin_left);
   valCenter_right = digitalRead(centerlinesensorPin_right); 

   while (valCenter_right == LOW || valCenter_left == HIGH) { 
     valCenter_left = digitalRead(centerlinesensorPin_left); 
     valCenter_right = digitalRead(centerlinesensorPin_right);
     Motor_L->run(BACKWARD);
     Motor_R->run(FORWARD);
     Motor_L->setSpeed(corner_speed); 
     Motor_R->setSpeed(corner_speed);
    }
  
   while (valCenter_left == LOW || valCenter_right == LOW){
     valCenter_left = digitalRead(centerlinesensorPin_left); 
     valCenter_right = digitalRead(centerlinesensorPin_right);

     Motor_L->run(FORWARD);
     Motor_R->run(FORWARD);  
     Motor_R->setSpeed(speed*0.4);
     Motor_L->setSpeed(speed);
    }
  }    



  int TurnRight (){
    int valCenter_left = digitalRead(centerlinesensorPin_left); 
    int valCenter_right = digitalRead(centerlinesensorPin_right); 
    int corner_speed = 120;
    int speed = 180;

    Motor_L->run(FORWARD);
    Motor_R->run(BACKWARD);
    Motor_L->setSpeed(corner_speed); 
    Motor_R->setSpeed(corner_speed);
    delay(1000);

    valCenter_left = digitalRead(centerlinesensorPin_left);
    valCenter_right = digitalRead(centerlinesensorPin_right); 

    while (valCenter_left== LOW || valCenter_right == HIGH) { 
      valCenter_left = digitalRead(centerlinesensorPin_left); 
      valCenter_right = digitalRead(centerlinesensorPin_right);
      Motor_L->run(FORWARD);
      Motor_R->run(BACKWARD);
      Motor_L->setSpeed(corner_speed); 
      Motor_R->setSpeed(corner_speed);
    }
  
    while (valCenter_left == LOW || valCenter_right == LOW){
      valCenter_left = digitalRead(centerlinesensorPin_left); 
      valCenter_right = digitalRead(centerlinesensorPin_right);
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_R->setSpeed(speed);
      Motor_L->setSpeed(speed*0.4);
    }
  }


int counter = 0;
int Total_Junction = 0;

void setup() {
  Serial.begin(9600);           // set up Serial library at 9600 bps
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  if (!AFMS.begin()) {         // create with the default frequency 1.6KHz
  // if (!AFMS.begin(1000)) {  // OR with a different frequency, say 1KHz
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1);
  }



  // Set the speed to start, from 0 (off) to 255 (max speed)
  Motor_R->setSpeed(255);
  Motor_L->setSpeed(255);
  Motor_R->run(FORWARD);
  Motor_L->run(FORWARD);
  // turn on motor
  Motor_R->run(RELEASE);
  Motor_L->run(RELEASE);

  pinMode(leftlinesensorPin, INPUT);
  pinMode(rightlinesensorPin, INPUT);
  pinMode(centerlinesensorPin_left, INPUT);
  pinMode(centerlinesensorPin_right, INPUT);

  pinMode (MagInputPin, INPUT);
  pinMode (sensityPin, INPUT) ;
  pinMode (greenLEDpin, OUTPUT);
  pinMode (redLEDpin, OUTPUT);
  pinMode (blueLEDpin, OUTPUT);
  

}

void loop(){

  int Pass_Zero = 0;
  int Blocks = 0;
  int Turn_Left_count = 0;
  int Turn_Right_count = 0;
  int Ignore_Turn = 0;

  int angles;
  int speed = 180;


  int valLeft = digitalRead(leftlinesensorPin); // read left input value
  int valRight = digitalRead(rightlinesensorPin); // read right input value
  int valCenter_left = digitalRead(centerlinesensorPin_left); 
  int valCenter_right = digitalRead(centerlinesensorPin_right); 
  float sensity_t = analogRead(sensityPin);
  

  // Actions:
  //      boolean values:
  bool Found_Block, Magnetic;
  bool Straight = (valLeft ==0 && valRight == 0);
  bool Junction_Left = (valLeft == 1 && valRight == 0 && valCenter_left == 1 && valCenter_right == 1);
  bool Junction_Right =  (valLeft == 0 && valRight == 1 && valCenter_left == 1 && valCenter_right == 1);
  bool Junction_Zero = (valLeft == 1 && valRight == 1 && valCenter_left == 1 && valCenter_right == 1);
  bool Junction_Five = (valLeft == 1 && valRight == 1 && valCenter_left == 0 && valCenter_right == 0);

  // Junctions:
  // Junction 5 = Turn_Right_count ==0 && Turn_Left_count ==0 && Ignore_Turn == 0 && Junction_Five == true;
  // Junction 4 = Turn_Right_count ==1 && Turn_Left_count ==0 && Ignore_Turn == 0 && Junction_Right == true;
  // Junction 3: Turn_Right_count ==1, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true
  // Junction 2: Turn_Right_count ==2, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true
  // Junction 1: Turn_Right_count ==3, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true

  // counts
  // Total_junction = Turn_Left_count + Turn_Right_count + Ignore_Turn + Pass_Zero;

  // What is going to happen IDEALLY:

  // turn on motor

  while (block_distance >= 10 || counter == 1){
  if (Junction_Zero == true && Total_Junction == 0) {
    Total_Junction = 1;
    sensity_t = analogRead(sensityPin);
    block_distance = sensity_t * MAX_RANG / ADC_SOLUTION; //
    if (valCenter_left == HIGH && valCenter_right == LOW) {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_L->setSpeed(speed*0.8);
      Motor_R->setSpeed(speed);
    } 

    else if (valCenter_left == LOW && valCenter_right == HIGH) {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_R->setSpeed(speed*0.8);
      Motor_L->setSpeed(speed);
    }  
  
    else {
      Motor_L->run(FORWARD);
      Motor_R->run(FORWARD);  
      Motor_R->setSpeed(speed);
      Motor_L->setSpeed(speed);
    }
  }
            
    else if (Junction_Five == true and Total_Junction == 1){ // at Junction 5
      TurnRight();
      Total_Junction = 2;
      //if (Found_Block){
        //TurnLeft(180);
        //MoveForward();
        //delay(2000);
      //break;
      //}
    }

    else if (Junction_Right == true and Total_Junction == 2){ // at Junction 4
        Total_Junction = 3;
        MoveForward();
    }

    else if (Junction_Right == true and Total_Junction == 3){ // at Junction 3
        Total_Junction = 4;
        TurnRight(90, speed);
        MoveForward();
    }

    else if (Junction_Right == true and Total_Junction == 4){ // at Junction 2
        Total_Junction = 5;
        TurnRight(90, speed);
        MoveForward();
    }

    else if (Junction_Right == true and Total_Junction == 5){ // at Junction 1
        Total_Junction = 6;
        MoveForward();
    }

    else if (Junction_Zero == true and Total_Junction == 6 ) { // at Junction 0 return
        Total_Junction = 7;
        TurnLeft(90, speed);
        MoveForward();
    }

    else if (Junction_Zero == true and Total_Junction == 6 ) { // at the starting point
        if(Magnetic){
            TurnRight();
        }
        else{
            TurnLeft();
        }
        MoveForward();
        Total_Junction = 7;
    }

    else if (Junction_Five == true and Total_Junction == 7 ) { // at one of those colorful boxes
        Total_Junction = 8;
        MoveForward();
        delay(100);
        Stop();
        Reverse(speed);
        delay(2000);
        TurnLeft(180, speed);
        MoveForward();
    }

    else if (Junction_Five == true and Total_Junction == 8 ) { // back in origin
        if(Magnetic){
            TurnLeft(90, speed);
        }
        else{
            TurnRight(90, speed);
        }
        Blocks = 1;
    }


    else {
    MoveForward();
    }
  }
    Motor_L->run(FORWARD);
    Motor_R->run(FORWARD);  
    Motor_R->setSpeed(0);
    Motor_L->setSpeed(0);

    if (counter == 0){
      counter = 1;
      if (Magnetic == HIGH) { // check if the input is HIGH
        digitalWrite(redLEDpin, HIGH);
        delay(6000);
        digitalWrite(redLEDpin, LOW); // turn red LED on
        return counter;
      }   
      else {
        digitalWrite(greenLEDpin, HIGH);
        delay(6000); 
        digitalWrite(greenLEDpin, LOW);// turn green LED on
        return counter;
      }
    }
}