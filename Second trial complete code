#include "functions.h"
// logic for junctions and normally turning
// functions we are using:
//      MoveForward     moves forward until deteects a block, and calls function Block
//      Block           when a block has been found, detect and shine LED and clamp it together (all that jazzzzzz)
//      TurnLeft and TurnRight      turns 90 degrees or until some sensor changes 
// sensors we are using
//      LineSensor_Left, LineSensor_Right, LineSensor_Center
//      MagneticSensor
//      UltraSonicSensor
// motors we are using
//      MotorLeft and MotorRight
//      Servor (for clampling block)
// LEDs we are using
//      Red and Green for testing magnetic
//      Blue for indicating moving
//      White for illuminating the line-sensors

int leftLineSensorPin = 2; 
int rightLineSensorPin = 3; 
int centerLineSensorPin_Left = 4;
int centerLineSensorPin_Right = 5;
int magInputPin = 6;
int ultrapin = A3;
int greenLEDpin = 7;
int redLEDpin = 8;
int blueLEDpin = 9;

// Motor setup code
#include <Adafruit_MotorShield.h>
#include <Servo.h>


Servo myservo;
int pos = 0; 


Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_DCMotor *Motor_L = AFMS.getMotor(1);
Adafruit_DCMotor *Motor_R = AFMS.getMotor(2);

void setup() {
  Serial.begin(9600);           
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  if (!AFMS.begin()) {         
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1);
  }
  Serial.println("Motor Shield found.");

  // Set the speed to start, 0
  Motor_L->setSpeed(0);
  Motor_R->setSpeed(0);
  Motor_L->run(FORWARD);
  Motor_R->run(BACKWARD);
  // turn on motor
  myMotor->run(RELEASE);
  myOtherMotor->run(RELEASE);

  pinMode(leftLineSensorPin , INPUT); 
  pinMode(rightLineSensorPin, INPUT); 
  pinMode(centerLineSensorPin_Left, INPUT);
  pinMode(centerLineSensorPin_Right, INPUT);
  pinMode(magInputPin, INPUT);
  pinMode(ultrapin, INPUT);
  pinMode(greenLEDpin, OUTPUT);
  pinMode(redLEDpin, OUTPUT);
  pinMode(blueLEDpin, OUTPUT);
  myservo.attach(10); // attaches the servo on pin 9 to the servo object

}




void loop (){
int valLeft = digitalRead(leftLineSensorPin); // read left input value
int valRight = digitalRead(rightLineSensorPin); // read right input value
int valCenter_left = digitalRead(centerLineSensorPin_Left); 
int valCenter_right = digitalRead(centerLineSensorPin_Right); 
int Magnetic = digitalRead(magInputPin);
int distance_detected = analogRead(ultrapin);
// Actions:
//      boolean values:
Straight = (valLeft ==0, valRight == 0)
Junction_Left = (valLeft == 1, valRight == 0, valCenter_left == 1, valCenter_left == 1)
Junction_Right =  (valLeft == 0, valRight == 1, valCenter_left == 1, valCenter_left == 1)
Junction_Zero = (valLeft == 1, valRight == 1, valCenter_left == 1, valCenter_left == 1) 
//      Junction_Zero can also be the same as when turning back from junction five
Junction_Five = (valLeft == 1, valRight == 0, valCenter_left == 0, valCenter_left == 1)

bool Found_Block, Magnetic;

// Junctions:
// Junction 5: Turn_Right_count ==0, Turn_Left_count ==0, Ignore_Turn == 0 and Junction_Five == true
// Junction 4: Turn_Right_count ==1, Turn_Left_count ==0, Ignore_Turn == 0 and Junction_Right == true
// Junction 3: Turn_Right_count ==1, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true
// Junction 2: Turn_Right_count ==2, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true
// Junction 1: Turn_Right_count ==3, Turn_Left_count ==0, Ignore_Turn == 1 and Junction_Right == true

// counts
Pass_Zero = 0;
Blocks = 0;
Turn_Left_count = 0;
Turn_Right_count = 0;
Ignore_Turn = 0;
Total_Junction = Turn_Left_count + Turn_Right_count + Ignore_Turn + Pass_Zero;

// What is going to happen IDEALLY:
while(Blocks == 0){

    if (Junction_Zero == True and Total_Junction == 0) {
        Pass_Zero = Pass_Zero + 1;
        MoveForward();
    }
          
    if (Junction_Five == True and Total_Junction == 1){ // at Junction 5
        TurnRight(angles = 90);
        Turn_Right_count = Turn_Right_count + 1;
        MoveForward();
        if (Found_Block){
            TurnLeft(180);
            MoveForward();
            delay(2000);
            break;
        }
    }

    if (Junction_Right == True and Total_Junction == 2){ // at Junction 4
        Ignore_Turn = Ignore_Turn + 1;
        MoveForward();
    }

    if (Junction_Right == True and Total_Junction == 3){ // at Junction 3
        Turn_Right_count = Turn_Right_count + 1;
        TurnRight(angles = 90);
        MoveForward();
    }

    if (Junction_Right == True and Total_Junction == 4){ // at Junction 2
        Turn_Right_count = Turn_Right_count + 1;
        TurnRight(angles = 90);
        MoveForward();
    }

    if (Junction_Right == True and Total_Junction == 5){ // at Junction 1
        Ignore_Turn = Ignore_Turn + 1;
        MoveForward();
    }

    if (Junction_Zero == True and Total_Junction == 6 ) { // at Junction 0 return
        Pass_Zero = Pass_Zero + 1;
        TurnLeft(angles = 90);
        MoveForward();
    }

    if (Junction_Zero == True and Total_Junction == 6 ) { // at the starting point
        if(Magnetic){
            TurnRight(angles = 90);
            Magnetic = TRUE;
        }
        else{
            TurnLeft(angles = 90);
        }
        MoveForward();
    }

    if (Junction_Five == True and Total_Junction == 7 ) { // at one of those colorful boxes
        Total_Junction = Total_Junction + 1;
        Motor_L->run(FORWARDS);
        Motor_R->run(FORWARDS);
        Motor_L->setSpeed(255);
        Motor_R->spetSpeed(255);
        delay(2000);
        Stop();
        Jaws(); //opens Jaws
        Reverse(delay = 2000);
        if (magnetic = TRUE) {
            TurnRight(angles = 90)
        }
        else {
            TurnLeft(angles = 180);
        }
        Motor_L->run(FORWARDS);
        Motor_R->run(FORWARDS);
        Motor_L->setSpeed(255);
        Motor_R->spetSpeed(255);
        delay(100);

        Blocks == 1;
    }


}

Pass_Zero = 0;
Turn_Left_count = 0;
Turn_Right_count = 0;
Ignore_Turn = 0;
Total_Junction = Turn_Left_count + Turn_Right_count + Ignore_Turn + Pass_Zero;
}
